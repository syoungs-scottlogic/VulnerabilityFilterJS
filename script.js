import vulns from "./vulns.json" assert { type: "json" };

let redList = document.getElementById("redList");

// generate array and map.
let myArr = vulns.dependencies;
let newArr = [];

for (let i = 0; i < myArr.length; i++) {
  if (myArr[i].vulnerabilities.length > 0) {
    newArr.push(myArr[i]);
  }
}

let mapArr = newArr.map((obj) => {
  return {
    name: obj.name,
    version: obj.version,
    vulnerabilities: obj.vulnerabilities,
  };
});

mapArr = uniqueArray(mapArr);

//----------------------
//--- FUNCTIONS --------

// main
(function formatVulns() {
  // if vulns.dependancies.vulnerabilities
  // list vuln
  // remove duplicates
  createHtmlElement(mapArr);
  console.log(mapArr);
})();

function createHtmlElement(vulnObj) {
  // do same with medim and low sev
  vulnObj.forEach((element) => {
    for (let i = 0; i < element.vulnerabilities.length; i++) {
      if (element.vulnerabilities[i].severity == "critical") {
        // append vuln to red class in html
        //name, version, vuln.name, vuln.severity
        doHtml(element.vulnerabilities[i], null, null);
      }
    }
  });
}

function doHtml(obj, sev, listID) {
  let vulnLi = document.createElement("li");
  vulnLi.innerHTML = obj.name;
  redList.appendChild(vulnLi);
}

// remove duplicates
function uniqueArray(arr) {
  return [...new Set(arr)];
}
